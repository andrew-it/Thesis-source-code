{
  "version": 0.1,
  "language": "C",
  "patterns": {
    "STR_VAR": {
      "pattern": "\""
    },
    "CHAR_VAR": {
      "pattern": "'"
    },
    "LOOP": {
      "pattern": "for(INITIAL_STATE, WHILE_CONDITION, STEP_EXPR){BODY}"
    },
    "IF_CONDITION": {
      "pattern": "if(CONDITION){\nBODY\n}"
    },
    "ELSE_CONDITION": {
      "pattern": "else{\nBODY\n}"
    },
    "ELIF_CONDITION": {
      "pattern": "else if(CONDITION){BODY}"
    },
    "TERNARY": {
      "pattern": "CONDITION?TRUE:FALSE;"
    },
    "FUNC_DECL": {
      "signature_delimiter": ",",
      "pattern": "\nRET_TYPE FUNC_NAME(SIGNATURE){\nBODY\n}"
    },
    "ENTRY_POINT": {
      "signature_delimiter": ",",
      "pattern": "\nRET_TYPE FUNC_NAME(SIGNATURE){\nBODY\n}"
    },
    "FUNC_CALL": {
      "signature_delimiter": ",",
      "pattern": "FUNC_NAME(PARAMS);"
    },
    "SIG_PARAM": {
      "pattern": "RET_TYPE VAR_NAME"
    },
    "SIG_PARAM_POINTER": {
      "pattern": "RET_TYPE *VAR_NAME"
    },
    "SIG_PARAM_CONST_POINTER": {
      "pattern": "RET_TYPE *const VAR_NAME"
    },
    "VAR_DECL": {
      "pattern": "RET_TYPE VAR_NAME;"
    },
    "VAR_DECL_POINTER": {
      "pattern": "RET_TYPE *VAR_NAME;"
    },
    "VAR_ASSIGNMENT": {
      "pattern": "VAR_NAME = VALUE;"
    },
    "EMPTY_OPERATOR": {
      "operator": ";"
    },
    "DEPENDENCY": {
      "pattern": "#include <LIB>"
    },
    "VAL_STR": {
      "pattern": "\"VALUE\""
    },
    "VAL_INT": {
      "pattern": "VALUE"
    },
    "HEADER_FILE": {
      "pattern": "#ifndef TYPE_ALIAS_H\n#define TYPE_ALIAS_H\ntypedef struct {\nMEMBER_DECLARATIONS\n} TYPE_ALIAS; FUNCTION_PROT_DECLARATIONS\n#endif"
    },
    "CLASS_DECL": {
      "pattern": "#include \"TYPE_ALIAS.h\"\nFUNCTION_DECLARATIONS"
    },
    "FUNC_PROTOTYPE": {
      "signature_delimiter": ",",
      "pattern": "\nRET_TYPE FUNC_NAME(SIGNATURE);"
    }
  },
  "dependencies": {
    "stdio.h": ["printf", "scanf"],
    "sthlib.h": ["sth"]
  },
  "standard_types": {
    "STRING": "char*",
    "INT": "int",
    "REAL": "float",
    "CHAR": "char",
    "VOID": "void"
  },
  "standard_functions": {
    "console_out": {
      "name": "printf",
      "str": "%s",
      "int": "%d"
    },
    "console_in": {
      "name": "scanf",
      "str": "%s",
      "int": "%d"
    }
  }
}